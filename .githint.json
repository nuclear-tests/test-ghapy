{
	"options": {
		"detectPull": "commit.author.login.toLowerCase() !== 'chieze-franklin'",
		"skip": "commit.author.login.toLowerCase() === 'chieze-franklin'"
	},
	"checks": {
		"This check always passes": "true",
		"A commit cannot touch more than 1 file": "commit.files.length < 2",
		"File Naming": {
		    "script": [
			"const offendingFiles = ",
			"tree.tree.filter(t => t.type === 'blob')", 
			".filter(t => !(/^([\\w-]+\\.){1,}[\\w-]+$/.test(t.path.substring(t.path.lastIndexOf('/') + 1))))",
			".map(t => t.path);",
			"if (offendingFiles.length > 0) {",
			"return {",
			"result: false,",
			"message: 'Offending files:\\n' + offendingFiles.map(f => '  ' + f).join('\\n')",
			"}",
			"} else {",
			"return true",
			"}"
		    ],
		    "message": [
			"We favour the `dot separated` + `kebab-case` convention.",
			"`{file title}.{file subtype}.{file type}.{file extension}`",
			"",
			"`file title` - Indicates what the file is about. Examples include `permission-type`, `employee`, `permission`, `role`, etc.",
			"`file subtype` - The subtype of the file. The file may be an interface of a repository.",
			"    A file can have more than one subtype, but they must all be separated by the period [.].",
			"`file type` - Indicates the type of the file. A file should have only one type.",
			"    These could be `controller`, `service`, `repository`, `interface`, etc. ",
			"`file extension` - Denotes the extension of the file, eg, `js`, `ts`, `json`, etc",
			"",
			"Examples:",
			"    `example-file.controller.ts`",
			"    `example-file.service.interface.ts`"
		    ]
		},
		"The message of a head commit must match the name of the branch": [
			"const commitMessage = commit.commit.message;",
			"const branchName = branch.name;",
			"return commitMessage === branchName;"
		],
		"Branch name must start with 'ft-' or 'ch-' or 'bug-' followed by stuff": {
			"script": "/^((ft-)|(ch-)|(bug-))[a-z0-9\\-]+$/.test(branch.name)",
			"message": "The name of this branch doesn't meet the specified criteria"
		},
		"Only Franklin can edit the .githint.json file": {
			"script": [
				"let file = commit.files[0].filename",
				"let editor = commit.commit.author.name",
				"return (file != '.githint.json' || editor == 'Chieze Franklin');"
			],
			"message": "The .githint.json file shouldn't be touched; Only Franklin can edit the file."
		},
		"Repo must contain CONTRIBUTING.md": "tree.tree.filter(t => t.path === 'CONTRIBUTING.md').length === 1",
		"A PR cannot touch more than 1 file": "pull.changed_files < 2",
		"A PR must have at least 1 approval": "pull.reviews.filter(r => r.state === 'APPROVED').length >= 1"
	}
}
